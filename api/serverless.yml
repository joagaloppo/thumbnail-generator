service: thumbnail-generator
frameworkVersion: '3'

custom:
  tableName: ${self:service}-${opt:stage, self:provider.stage}
  bucketName: ${self:service}-${opt:stage, self:provider.stage}-bucket
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}'
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - 'arn:aws:s3:::${self:custom.bucketName}/*'
  environment:
    USERS_TABLE: ${self:custom.tableName}
    BUCKET_NAME: ${self:custom.bucketName}

functions:
  app:
    handler: dist/index.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    ImagesBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.bucketName}

plugins:
  - serverless-offline
  - serverless-dynamodb-local
